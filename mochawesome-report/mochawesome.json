{
  "stats": {
    "suites": 6,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-23T13:58:29.668Z",
    "end": "2022-02-23T13:59:32.669Z",
    "duration": 63001,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6850a986-51a1-4078-bcfc-183ca69b252a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d123502-814c-4d28-bd97-f793065ee47a",
          "title": "Store inventory should have status code 200",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have status code 200",
              "fullTitle": "Store inventory should have status code 200 Should have status code 200",
              "timedOut": false,
              "duration": 1186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let statusCode = await ApiHelper.getStatusCode(testData.urls.storeInventory, false);\nexpect(statusCode).to.equal(200);",
              "err": {},
              "uuid": "37a7448f-316e-44f2-b3e6-147167ee90e1",
              "parentUUID": "0d123502-814c-4d28-bd97-f793065ee47a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "37a7448f-316e-44f2-b3e6-147167ee90e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ce7135a3-e31c-4964-bd6e-4ba608cfba9d",
          "title": "Should return 404 when an invalid id is passed",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should display an error message",
              "fullTitle": "Should return 404 when an invalid id is passed Should display an error message",
              "timedOut": false,
              "duration": 560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await ApiHelper.getById(testData.urls.pet, 'blah');\nexpect(response.message).to.equal('Request failed with status code 404');",
              "err": {},
              "uuid": "a10b5895-cf59-40c9-9ff6-174db6e11312",
              "parentUUID": "ce7135a3-e31c-4964-bd6e-4ba608cfba9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a10b5895-cf59-40c9-9ff6-174db6e11312"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 560,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "d5c130f9-f36b-4117-9cdd-c74ffe78ec7f",
          "title": "Should find pets by a valid status",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should find pets by a valid status",
              "fullTitle": "Should find pets by a valid status Should find pets by a valid status",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let status = CommonHelper.provideRandomValFromArr(testData.petStatus);\nlet response = await ApiHelper.findByQueryParameter(testData.urls.findByStatus, 'status', status);\nawait console.log(response.data[0].status);\nlet resultStatuses = await CommonHelper.findProperties('status', response);\nexpect(resultStatuses.length).to.equal(1);\nexpect(resultStatuses[0]).to.equal(status);",
              "err": {},
              "uuid": "556170b0-5a5e-4b86-90d9-6ef91270d4de",
              "parentUUID": "d5c130f9-f36b-4117-9cdd-c74ffe78ec7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "556170b0-5a5e-4b86-90d9-6ef91270d4de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 612,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a227033d-a036-4855-8495-54023d16213c",
          "title": "Should be able to add a new pet",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to add a pet",
              "fullTitle": "Should be able to add a new pet Should be able to add a pet",
              "timedOut": false,
              "duration": 11151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.newPet.id = newPetId;\nawait ApiHelper.postAnEntry(testData.urls.pet, testData.newPet);\nlet response = await ApiHelper.getWithRetry(testData.urls.pet, testData.newPet.id, 10, 10000);\nexpect(JSON.stringify(response.data)).to.equal(JSON.stringify(testData.newPet));",
              "err": {},
              "uuid": "1826cb6a-2abf-4584-ad44-b82c95fa0f91",
              "parentUUID": "a227033d-a036-4855-8495-54023d16213c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1826cb6a-2abf-4584-ad44-b82c95fa0f91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11151,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5a777a67-3fdb-45fa-834c-9339ee78a7ec",
          "title": "Should be able to update an existing pet",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to update an existing pet",
              "fullTitle": "Should be able to update an existing pet Should be able to update an existing pet",
              "timedOut": false,
              "duration": 21794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.updatedPet.id = newPetId;\nawait ApiHelper.updateAnExistingEntry(testData.urls.pet, testData.updatedPet);\nlet response = await ApiHelper.getWithRetry(testData.urls.pet, testData.newPet.id, 10, 10000);\nexpect(JSON.stringify(response.data)).to.equal(JSON.stringify(testData.updatedPet));",
              "err": {},
              "uuid": "053f5fd3-af54-4a5f-b6f1-6d346e170a5f",
              "parentUUID": "5a777a67-3fdb-45fa-834c-9339ee78a7ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "053f5fd3-af54-4a5f-b6f1-6d346e170a5f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21794,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e2b6597e-33b7-421c-8363-7ad522371674",
          "title": "Should be able to delete a pet",
          "fullFile": "C:\\Users\\UC264228\\Learning\\api\\API-tests-with-axios\\test\\petStoreTests.spec.js",
          "file": "\\test\\petStoreTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to delete a pet",
              "fullTitle": "Should be able to delete a pet Should be able to delete a pet",
              "timedOut": false,
              "duration": 27685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let responseBefore = await ApiHelper.getWithRetry(testData.urls.pet, newPetId, 10, 10000);\nawait ApiHelper.deletewithRetry(testData.urls.pet, newPetId, testData.config, 10, 5000);\nCommonHelper.wait(5000);\nlet responseAfter = await ApiHelper.getById(testData.urls.pet, newPetId);\nexpect(responseBefore.data.id).to.equal(newPetId);\nexpect(responseAfter.response.data.message).to.equal('Pet not found');",
              "err": {},
              "uuid": "0faa6878-9373-48c4-8557-96fb003b8131",
              "parentUUID": "e2b6597e-33b7-421c-8363-7ad522371674",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0faa6878-9373-48c4-8557-96fb003b8131"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27685,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}